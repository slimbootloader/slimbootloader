/** @file
  This file contains a structure definition for the ACPI Memory Mapped Configuration
  Address Space table (MCFG).  Any changes to the number of entries in the table require
  updating the structure count in Mcfg.h and then adding the structure to the
  MCFG defined in this file.  The table layout is defined in Mcfg.h and the
  table contents are defined in the MemoryMappedConfigurationSpaceAccessTable.h.

  Copyright (c) 2019, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

#include <Acpi/AcpiTablePlatform.h>

//
// Multiple APIC Description Table
//

EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_BASE_ADDRESS_TABLE Mcfg = {
  {
    {
      EFI_ACPI_2_0_MEMORY_MAPPED_CONFIGURATION_BASE_ADDRESS_TABLE_SIGNATURE,
      sizeof (EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_BASE_ADDRESS_TABLE),
      EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_TABLE_REVISION,
      //
      // Checksum will be updated at runtime
      //
      0x00,
      {
        EFI_ACPI_OEM_ID
      },
      EFI_ACPI_OEM_TABLE_ID,
      EFI_ACPI_OEM_MCFG_REVISION,
      EFI_ACPI_CREATOR_ID,
      EFI_ACPI_CREATOR_REVISION
    },
  //
  // Beginning of MCFG specific fields
  //
  EFI_ACPI_RESERVED_QWORD,
  },
  //
  // Sample Memory Mapped Configuration Space Base Address Structure
  //
  // 0x0,                     // Base Address
  // 0x0,                     // PCI Segment Group Number
  // 0x0,                     // Start Bus Number
  // 0x0,                     // End Bus Number
  // EFI_ACPI_RESERVED_DWORD, // Reserved
  //
  // Memory Mapped Configuration Space Base Address Structure
  //
  {
    0x80000000,               // Base Address, will be updated by AcpiPlatform
    0x0,                      // PCI Segment Group Number
    0x0,                      // Start Bus Number
    0xff,                     // End Bus Number
    EFI_ACPI_RESERVED_DWORD,  // Reserved
  }
};

VOID *
ReferenceAcpiTable (
 VOID
 )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the exeutable
  //
  return (VOID *)&Mcfg;
}
