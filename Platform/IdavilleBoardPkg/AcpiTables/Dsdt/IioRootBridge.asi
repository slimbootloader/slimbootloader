/** @file

  Copyright (c) 2020, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

  External (DBGM, FieldUnitObj)
  Name (SUPP, 0)
  Name (CTRL, 0)

  //
  // _BBN is ACPI method called by OS to read PCI base bus number for IIO stack.
  //
  Method(_BBN, 0, NotSerialized)
  {
    Return(CONCATENATE3(BB, SOCKET, STACK))
  }

  //
  // _PXM is ACPI method called by OS to read Proximity Domain (aka NUMA Node) where IIO stack belongs to.
  //
  Method(_PXM, 0, NotSerialized)
  {
    Store(SOCKET, Local0)
    If (CLOD) {
      //
      // If Sub-NUMA Cluster (SNC) enabled report PCI in the first of SNC domains of a socket,
      // so multiplicate socket number by the number of SNC domains.
      //
      Multiply (Local0, CLOD, Local0)
    }
    Return(Local0)
  }

  //
  // _SEG is ACPI method called by OS to read PCI segment of IIO stack.
  //
  Method(_SEG, 0, NotSerialized)
  {
    Return(CONCATENATE2(SG0, SOCKET))
  }

  //
  // _STA is ACPI method called by OS to read status of ACPI device, IIO stack in this case.
  //
  Method(_STA, 0, NotSerialized)
  { //
    // Check in processor present bitmap (PRBM) if processor is present, then
    // in stack present bitmap of given processor (SPBx) if stack is present.
    //
    ShiftLeft(1, SOCKET, Local0)
    If (And(PRBM, Local0)) {

      ShiftLeft(1, CONCATENATE2(0x,STACK), Local1)
      if (And(CONCATENATE2(SPB, SOCKET), Local1)) {
        Return(0x0F)
      }
    }
    Return(0x00)
  }

  Method(_OSC, 4)
  {
      //
      // Create DWord-addressable fields from the capabilities Buffer
      //
      CreateDWordField(Arg3,0,CDW1)
      If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {

        //
        // Create DWord-addressable fields from the capabilities Buffer
        //
        CreateDWordField(Arg3,4,CDW2)

        //
        // Fill 3rd capability DWORD only if the count is greater than 2.
        //
        If(LGreater(Arg2,2)) {
          CreateDWordField(Arg3,8,CDW3)
        }

        //
        // Save Capabilities DWord2 & 3
        //
        Store(CDW2,SUPP)
        Store(CDW3,CTRL)

        //
        // Only allow native hot plug control if OS supports
        // * MSI/MSI-X
        //
        If (LOr(AHPE, LNotEqual(And(SUPP, 0x10), 0x10))) { // Conditions not met?
          And(CTRL, Not(1), CTRL) // Mask bit 0 to deny.
          Sleep(1000)
        }

        //
        // Never allow SHPC (no SHPC controller in system), Mask bit 1
        //
        And(CTRL, Not(2), CTRL)


        //
        // Select Native PCIe AER/eDPC handling from OS or Firmware First model
        //
        If (CondRefOf (\_SB.OSNC))
        {
          //in case OS has AER capability.
          If (LEqual ( And(CTRL, 8), 8)) {

            //in case OS support multiple segment.
            If (And (SUPP, 8)) {
              If (CondRefof (^_SEG))
              {
                Store (^_SEG, Local0)
              } Else {
                Store (0, Local0)
              }
            } Else {
              Store (0, Local0)
            }

            Store (^_BBN, Local1)

            // if BIOS allows OS take. Do nothing.
            If (\_SB.OSNC(Local0, Local1, SUPP, CTRL)) {

            } Else {
              And (CTRL, Not(0x88), CTRL)
            }
          } Else {
            And (CTRL, Not(0x88), CTRL)
          }
        } Else {
          //
          //Disable Native PCIe AER/eDPC handling from OS, AER is bit3, eDPC is bit7
          //
          And (CTRL, Not(0x88), CTRL)
        }

        If (Not(And(CDW1,1))) { // Query Flag Clear?
          //
          // Disable GPEs for Features granted native control
          //
          If (And(CTRL, 0x01)) { // Native Hot plug control granted?
            \_SB.OSCM (_UID)
            Store (0x01, GPSH)                // Clear Hotplug SCI Enable in GPE0
          }
        }

        If (LNotEqual(Arg1,one)) { // unknown revision
          Or(CDW1,0x08,CDW1)
        }

        If(LNotEqual(CDW3,CTRL)) { // capabilities bits were masked
          Or(CDW1,0x10,CDW1)
        }
        //
        // update DWORD3 in the buffer
        //
        Store(CTRL,CDW3)
        Return(Arg3)

      } Else {
        //
        // Just indicate unrecognized UUID
        // Leave it at that
        //
        Or (CDW1,4,CDW1)
        if(LEqual(DBGM, 0x01)){
          Store (0xEE, IO80)
        }
        Return(Arg3)
      }
  } // End _OSC

  Name(RBRS, ResourceTemplate() {
    //RESOURCE_CHUNK1_OFF
    WORDBusNumber(            //Bus number resource (0); the bridge produces bus numbers for its subsequent buses
      ResourceProducer,       // bit 0 of general flags is 1
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,              // PosDecode
      0x0000,                 // Granularity (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001,                 // Range Length = Max-Min+1 (FIX1 - Patched by ACPI Platform Driver during POST)
            ,
            ,
      BRT0                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //: Off board video card not detected in device manager when it is connected to CPU
    //RESOURCE_CHUNK5_OFF
    DWORDMEMORY(              // descriptor for video RAM on video card
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is Fixed
      Cacheable,
      ReadWrite,
      0x00000000,             // Granularity  (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min          (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max          (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000,             // Range Length (FIX5 - Patched by ACPI Platform Driver during POST)
                ,
                ,
      FIX5                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //RESOURCE_CHUNK2_OFF
    WORDIO(                   //Consumed-and-produced resource (all I/O above CFF)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001,                 // Range Length = Max-Min+1 (FIX2 - Patched by ACPI Platform Driver during POST)
            ,
            ,
      PI01                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //Off board video card not detected in device manager when it is connected to CPU
    //Descriptor for IO space of the video card.
    WORDIO(                   // Consumed-and-produced resource (all I/O below CF8)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0000,                 // Range Length
            ,
            ,
      FIX6                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //Off board video card not detected in device manager when it is connected to CPU
    //Descriptor for IO space of the video card.
    WORDIO(                   // Consumed-and-produced resource (all I/O below CF8)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0000,                 // Range Length
            ,
            ,
      FIX7                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //
    // PCI RESOURCE_32bit
    //
    DWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x00000000,             // Granularity (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min (calculated dynamically) (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max = 4GB - 1MB  (fwh + fwh alias) (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000,             // Range Length (calculated dynamically) (FIX3 - Patched by ACPI Platform Driver during POST)
                ,
                ,
      PM01                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //
    // PCI RESOURCE_64bit
    //
    QWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x00000000000,          // Granularity (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Min (calculated dynamically) (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Max = 4GB - 1MB  (fwh + fwh alias) (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Translation
      0x00000000000,          // Range Length (calculated dynamically) (FIX4 - Patched by ACPI Platform Driver during POST)
                   ,
                   ,
      PM02                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )
  }) // end of PRXX Buffer

    // Current resource template return
  Method(_CRS, 0x0, NotSerialized)
  {
    // Fix up Bus Resource template
    CreateWordField(RBRS, ^BRT0._MIN, BRMN)
    Store(CONCATENATE3(BB, SOCKET, STACK), BRMN)
    CreateWordField(RBRS, ^BRT0._MAX, BRMX)
    Store(CONCATENATE3(BL, SOCKET, STACK), BRMX)
    CreateWordField(RBRS, ^BRT0._LEN, BRLN)
    Subtract(BRMX, BRMN, BRLN)
    Add(1, BRLN, BRLN)

    // Fix up 16-bit Io resources
    CreateWordField(RBRS, ^PI01._MIN, PIMN)
    Store(CONCATENATE3(I, STACK, IB), PIMN)
    CreateWordField(RBRS, ^PI01._LEN, PILN)
    Store(CONCATENATE3(I, STACK, IL), PILN)
    CreateWordField(RBRS, ^PI01._MAX, PIMX)
    Add(PIMN, PILN, PIMX)
    Subtract(PIMX, 1, PIMX)

    // Fix up 32-bit Memory resources
    CreateDWordField(RBRS, ^PM01._MIN, PMMN)
    Store(CONCATENATE3(I, STACK, 3B), PMMN)
    CreateDWordField(RBRS, ^PM01._LEN, PMLN)
    Store(CONCATENATE3(I, STACK, 3L), PMLN)
    CreateDWordField(RBRS, ^PM01._MAX, PMMX)
    Add(PMMN, PMLN, PMMX)
    Subtract(PMMX, 1, PMMX)

    // Hardcode 64-bit resource here until
    // 64-bit allocation is fixed in 32-bit build.
    Store(0x021000000000, I16B)
    Store( 0x01000000000, I16L)
    Store(0x022000000000, I26B)
    Store( 0x01000000000, I26L)

    // Fix up 64-bit Memory resources
    CreateQWordField(RBRS, ^PM02._MIN, P2MN)
    Store(CONCATENATE3(I, STACK, 6B), P2MN)
    CreateQWordField(RBRS, ^PM02._LEN, P2LN)
    Store(CONCATENATE3(I, STACK, 6L), P2LN)
    CreateQWordField(RBRS, ^PM02._MAX, P2MX)
    Add(P2MN, P2LN, P2MX)
    Subtract(P2MX, 1, P2MX)

    Return(RBRS)
  }

