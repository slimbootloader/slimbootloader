/** @file

  Copyright (c) 2020, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

#include <Acpi/AcpiTablePlatform.h>

#define HECI_CMD_CPUHOTPLUG   1
#define HECI_CMD_CPUHOTREMOVE 2

#define  SIZE_LAPIC_STRUC     8
#define  LAPIC_TYPE           0

#define  SIZE_X2LAPIC_STRUC   16
#define  X2LAPIC_TYPE         9

#define  MAK_STR(x)   #x

//
// This macro creates method that calculates
// number of active threads for its socket
//
#define CPU_THREADS_NUM(socket)                                             \
  Method(THNU, 0) {                                                         \
    Store(0, Local0)                                                        \
    Store(P##socket##BM, Local1)                                            \
    While (Local1) {                                                        \
      Add(Local0, And(Local1, 1), Local0)                                   \
      ShiftRight(Local1, 1, Local1)                                         \
    }                                                                       \
    return (Or(ShiftLeft(socket, 8), Local0))                               \
  }

//
//set DevName ProcId field and IO to C##thread
//
#define  CPU_THREAD_DEV(socket, thread)                                     \
  Device(C##thread) {                                                       \
    Name(_HID, "ACPI0007")                                                  \
    Method (_UID) {                                                         \
      Return (\_SB.CUID(0x0##socket, 0x##thread))                           \
    }                                                                       \
    Method(_PXM) {                                                          \
      if (LEqual (CLOD, 0)) {                                               \
        Return(0x0##socket)                                                 \
      } else {                                                              \
        Store(DerefOf(Index(\_SB.APT##socket, 0x##thread)), Local0)         \
        Store(CNBS, Local1)                                                 \
        Subtract(Local1, 1, Local1)                                         \
        ShiftRight(Local0, Local1, Local0)                                  \
        And(Local0, 1, Local0)                                              \
        Store(0x##socket, Local1)                                           \
        Multiply(Local1, 2, Local1)                                         \
        if(LEqual(Local0, 1)) {                                             \
          Add(Local1, 1, Local1)                                            \
        }                                                                   \
        Return(Local1)                                                      \
      }                                                                     \
    }                                                                       \
    Method(_STA) {                                                          \
      if(LEqual(\_SB.CSTA(0x0##socket, 0x##thread), 0x00)) {                \
        Return(0x00)                                                        \
      } else {                                                              \
        If (LGreaterEqual (\_SB.OSYS, 12)) {                                \
          Return(0x0F)                                                      \
        } Else {                                                            \
          Return(0x0B)                                                      \
        }                                                                   \
      }                                                                     \
    }                                                                       \
    Method(_MAT) {                                                          \
      if(SKOV) {                                                            \
        Return(\_SB.X2AP(0x0##socket, 0x##thread))                          \
      } else {                                                              \
      Return(\_SB.LAPC(0x0##socket, 0x##thread))                            \
      }                                                                     \
    }                                                                       \
  }

#define  CPU_SOCKET_DEV(socket)                                             \
  Device(\_SB.SCK##socket) {                                                \
    Name (_HID, "ACPI0004")                                                 \
    Name (_UID, MAK_STR(CPUSCK##socket))                                    \
    Name (LSTA, 0xff)                                                       \
    Method(_STA) {                                                          \
      Store(MAK_STR(CPUSCK##socket), CUU##socket)                           \
      Store(\_SB.PSTA(0x0##socket), Local0)                                 \
      And(Local0, 0x03, Local1)                                             \
      If (LAnd(LNotEqual(LSTA, 0xff), LNotEqual(Local1, LSTA))) {           \
        If (LEqual(Local1, 0x03)) {                                         \
          /*\_SB.PC00.HEC2.HPNF(HECI_CMD_CPUHOTPLUG, socket, THNU) TODO: Obsolete with _PUR?*/\
        } Else {                                                            \
          /*\_SB.PC00.HEC2.HPNF(HECI_CMD_CPUHOTREMOVE, socket, THNU) TODO: Obsolete with _PUR?*/\
        }                                                                   \
      }                                                                     \
      Store(Local1, LSTA)                                                   \
      return(Local0)                                                        \
    }                                                                       \
                                                                            \
    CPU_THREADS_NUM(socket)        \
    CPU_THREAD_DEV (socket, 000)   \
    CPU_THREAD_DEV (socket, 001)   \
    CPU_THREAD_DEV (socket, 002)   \
    CPU_THREAD_DEV (socket, 003)   \
    CPU_THREAD_DEV (socket, 004)   \
    CPU_THREAD_DEV (socket, 005)   \
    CPU_THREAD_DEV (socket, 006)   \
    CPU_THREAD_DEV (socket, 007)   \
    CPU_THREAD_DEV (socket, 008)   \
    CPU_THREAD_DEV (socket, 009)   \
    CPU_THREAD_DEV (socket, 00A)   \
    CPU_THREAD_DEV (socket, 00B)   \
    CPU_THREAD_DEV (socket, 00C)   \
    CPU_THREAD_DEV (socket, 00D)   \
    CPU_THREAD_DEV (socket, 00E)   \
    CPU_THREAD_DEV (socket, 00F)   \
    CPU_THREAD_DEV (socket, 010)   \
    CPU_THREAD_DEV (socket, 011)   \
    CPU_THREAD_DEV (socket, 012)   \
    CPU_THREAD_DEV (socket, 013)   \
    CPU_THREAD_DEV (socket, 014)   \
    CPU_THREAD_DEV (socket, 015)   \
    CPU_THREAD_DEV (socket, 016)   \
    CPU_THREAD_DEV (socket, 017)   \
    CPU_THREAD_DEV (socket, 018)   \
    CPU_THREAD_DEV (socket, 019)   \
    CPU_THREAD_DEV (socket, 01A)   \
    CPU_THREAD_DEV (socket, 01B)   \
    CPU_THREAD_DEV (socket, 01C)   \
    CPU_THREAD_DEV (socket, 01D)   \
    CPU_THREAD_DEV (socket, 01E)   \
    CPU_THREAD_DEV (socket, 01F)   \
    CPU_THREAD_DEV (socket, 020)   \
    CPU_THREAD_DEV (socket, 021)   \
    CPU_THREAD_DEV (socket, 022)   \
    CPU_THREAD_DEV (socket, 023)   \
    CPU_THREAD_DEV (socket, 024)   \
    CPU_THREAD_DEV (socket, 025)   \
    CPU_THREAD_DEV (socket, 026)   \
    CPU_THREAD_DEV (socket, 027)   \
    CPU_THREAD_DEV (socket, 028)   \
    CPU_THREAD_DEV (socket, 029)   \
    CPU_THREAD_DEV (socket, 02A)   \
    CPU_THREAD_DEV (socket, 02B)   \
    CPU_THREAD_DEV (socket, 02C)   \
    CPU_THREAD_DEV (socket, 02D)   \
    CPU_THREAD_DEV (socket, 02E)   \
    CPU_THREAD_DEV (socket, 02F)   \
    CPU_THREAD_DEV (socket, 030)   \
    CPU_THREAD_DEV (socket, 031)   \
    CPU_THREAD_DEV (socket, 032)   \
    CPU_THREAD_DEV (socket, 033)   \
    CPU_THREAD_DEV (socket, 034)   \
    CPU_THREAD_DEV (socket, 035)   \
    CPU_THREAD_DEV (socket, 036)   \
    CPU_THREAD_DEV (socket, 037)   \
    CPU_THREAD_DEV (socket, 038)   \
    CPU_THREAD_DEV (socket, 039)   \
    CPU_THREAD_DEV (socket, 03A)   \
    CPU_THREAD_DEV (socket, 03B)   \
    CPU_THREAD_DEV (socket, 03C)   \
    CPU_THREAD_DEV (socket, 03D)   \
    CPU_THREAD_DEV (socket, 03E)   \
    CPU_THREAD_DEV (socket, 03F)   \
    CPU_THREAD_DEV (socket, 040)   \
    CPU_THREAD_DEV (socket, 041)   \
    CPU_THREAD_DEV (socket, 042)   \
    CPU_THREAD_DEV (socket, 043)   \
    CPU_THREAD_DEV (socket, 044)   \
    CPU_THREAD_DEV (socket, 045)   \
    CPU_THREAD_DEV (socket, 046)   \
    CPU_THREAD_DEV (socket, 047)   \
    CPU_THREAD_DEV (socket, 048)   \
    CPU_THREAD_DEV (socket, 049)   \
    CPU_THREAD_DEV (socket, 04A)   \
    CPU_THREAD_DEV (socket, 04B)   \
    CPU_THREAD_DEV (socket, 04C)   \
    CPU_THREAD_DEV (socket, 04D)   \
    CPU_THREAD_DEV (socket, 04E)   \
    CPU_THREAD_DEV (socket, 04F)   \
    CPU_THREAD_DEV (socket, 050)   \
    CPU_THREAD_DEV (socket, 051)   \
    CPU_THREAD_DEV (socket, 052)   \
    CPU_THREAD_DEV (socket, 053)   \
    CPU_THREAD_DEV (socket, 054)   \
    CPU_THREAD_DEV (socket, 055)   \
    CPU_THREAD_DEV (socket, 056)   \
    CPU_THREAD_DEV (socket, 057)   \
    CPU_THREAD_DEV (socket, 058)   \
    CPU_THREAD_DEV (socket, 059)   \
    CPU_THREAD_DEV (socket, 05A)   \
    CPU_THREAD_DEV (socket, 05B)   \
    CPU_THREAD_DEV (socket, 05C)   \
    CPU_THREAD_DEV (socket, 05D)   \
    CPU_THREAD_DEV (socket, 05E)   \
    CPU_THREAD_DEV (socket, 05F)   \
    CPU_THREAD_DEV (socket, 060)   \
    CPU_THREAD_DEV (socket, 061)   \
    CPU_THREAD_DEV (socket, 062)   \
    CPU_THREAD_DEV (socket, 063)   \
    CPU_THREAD_DEV (socket, 064)   \
    CPU_THREAD_DEV (socket, 065)   \
    CPU_THREAD_DEV (socket, 066)   \
    CPU_THREAD_DEV (socket, 067)   \
    CPU_THREAD_DEV (socket, 068)   \
    CPU_THREAD_DEV (socket, 069)   \
    CPU_THREAD_DEV (socket, 06A)   \
    CPU_THREAD_DEV (socket, 06B)   \
    CPU_THREAD_DEV (socket, 06C)   \
    CPU_THREAD_DEV (socket, 06D)   \
    CPU_THREAD_DEV (socket, 06E)   \
    CPU_THREAD_DEV (socket, 06F)   \
    CPU_THREAD_DEV (socket, 070)   \
    CPU_THREAD_DEV (socket, 071)   \
    CPU_THREAD_DEV (socket, 072)   \
    CPU_THREAD_DEV (socket, 073)   \
    CPU_THREAD_DEV (socket, 074)   \
    CPU_THREAD_DEV (socket, 075)   \
    CPU_THREAD_DEV (socket, 076)   \
    CPU_THREAD_DEV (socket, 077)   \
    CPU_THREAD_DEV (socket, 078)   \
    CPU_THREAD_DEV (socket, 079)   \
    CPU_THREAD_DEV (socket, 07A)   \
    CPU_THREAD_DEV (socket, 07B)   \
    CPU_THREAD_DEV (socket, 07C)   \
    CPU_THREAD_DEV (socket, 07D)   \
    CPU_THREAD_DEV (socket, 07E)   \
    CPU_THREAD_DEV (socket, 07F)   \
  }

  Scope(\_SB) {

    //----------------------------------------------------------------
    //  Method PSTA()
    //      Return package state
    //
    //  Inputs: Arg0 = socket number for which to return the _STA code.
    //----------------------------------------------------------------
    Method(PSTA, 1){        // Socket Status
      ShiftRight(PRBM, Arg0, Local6)
      And(Local6, 0x1, Local6)
      if(LEqual(Local6, 0x0)) {
        Return(0x00)
      } else {
        Return(0x0F)
      }
    } // End Method PSTA

    //----------------------------------------------------------------
    // APIC ID Map
    // Extened APIC ID buffer to support MAX 64 core
    //----------------------------------------------------------------
    Name (APT0, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT1, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT2, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT3, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT4, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT5, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT6, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    Name (APT7, Buffer (128) {
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    })

    //----------------------------------------------------------------
    //  Method TPID()
    //      Convert the socket and thread index to the actual APIC ID
    //
    //  Inputs: Arg0 = socket index
    //          Arg1 = thread index
    //----------------------------------------------------------------
    Method (TPID, 2, NotSerialized) {
      Store (0x00, Local0)
      If (LEqual (Arg0, 0x00))
      {
        Store (P0ID, Local0)
        Add (Local0, DerefOf(Index(APT0, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x01))
      {
        Store (P1ID, Local0)
        Add (Local0, DerefOf(Index(APT1, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x02))
      {
        Store (P2ID, Local0)
        Add (Local0, DerefOf(Index(APT2, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x03))
      {
        Store (P3ID, Local0)
        Add (Local0, DerefOf(Index(APT3, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x04))
      {
        Store (P4ID, Local0)
        Add (Local0, DerefOf(Index(APT4, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x05))
      {
        Store (P5ID, Local0)
        Add (Local0, DerefOf(Index(APT5, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x06))
      {
        Store (P6ID, Local0)
        Add (Local0, DerefOf(Index(APT6, Arg1)), Local0)
      }

      If (LEqual (Arg0, 0x07))
      {
        Store (P7ID, Local0)
        Add (Local0, DerefOf(Index(APT7, Arg1)), Local0)
      }

      Return (Local0)
    }

    //----------------------------------------------------------------
    //  Method CSTA()
    //      Get current processor state
    //  Inputs: Arg0 = Socket Number where core belongs
    //          Arg1 = Thread number for which to return the _STA code
    //                 (Bit0 - Core Id, BIT1- Thread Id)
    //----------------------------------------------------------------
    Method(CSTA, 2){        // Core Status
      Store(0, Local0)
      Store(0, Local2)    //for Core#

      //Get ApicId per thread Index from APT#
      if (LEqual(Arg0, 0x0)) {
        if(LEqual(P0BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT0, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P0BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x1)) {
        if(LEqual(P1BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT1, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P1BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x2)) {
        if(LEqual(P2BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT2, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P2BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x3)) {
        if(LEqual(P3BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT3, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P3BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x4)) {
        if(LEqual(P4BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT4, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P4BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x5)) {
        if(LEqual(P5BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT5, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P5BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x6)) {
        if(LEqual(P6BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT6, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P6BM, Local2, Local0)
      }
      if (LEqual(Arg0, 0x7)) {
        if(LEqual(P7BM, 0x0)) {
          Return(0x00)
        }

        Add (Local2, DerefOf(Index(APT7, Arg1)), Local2)
        if (LEqual(Local2, 0xFF)) {
          Return(0x00)
        }
        //Processor Bit mask is changed for core# only
        ShiftRight(Local2, 1, Local2)
        ShiftRight(P7BM, Local2, Local0)
      }

      And(Local0, 0x1, Local0)
      if(LEqual(Local0, 0x0)) {
        Return(0x00)
      } else {
        Return(0x01)
      }
    } // End Method CSTA

    //----------------------------------------------------------------
    //  Method CUID()
    //    Return MADT ACPI Processor UID, AcpiProcessorId and _UID
    //    Should match with AcpiProcessorId in C code
    //
    //  Inputs: Arg0 = Socket ID
    //  Inputs: Arg1 = Thread ID
    //  Return  _UID
    //----------------------------------------------------------------+
    Method (CUID, 2) {
      Store(ShiftLeft(1, CNBS), Local1)
      Multiply(Arg0, local1, local1)
      Add(local1, Arg1, local1)

      Return (Local1)
    }

    //----------------------------------------------------------------
    //  Method LAPC()
    //    Return the _MAT APIC data structure
    //
    //  Inputs: Arg0 = Socket ID
    //  Inputs: Arg1 = Thread ID
    //          APID = TPID(Arg0, Arg1)
    //          PUID = Socket ID << CNBS + Thread ID
    //----------------------------------------------------------------+
    Method(LAPC, 2,Serialized) {

      Name(APIC, Buffer(SIZE_LAPIC_STRUC) {} ) // initialize a buffer with CRST size

      CreateByteField (APIC, 0x00,  TYPE) // Type
      CreateByteField (APIC, 0x01,  LLEN) // Length
      CreateByteField (APIC, 0x02,  PUID) // ACPI Processor ID
      CreateByteField (APIC, 0x03,  APID) // APIC ID
      CreateDwordField(APIC, 0x04,  FLAG) // Flags

      Store(LAPIC_TYPE, TYPE)
      Store(SIZE_LAPIC_STRUC, LLEN)

      // Update APIC ID
      Store (\_SB.TPID(Arg0, Arg1), APID)

      // Update Flag
      if(LEqual(\_SB.CSTA(Arg0, Arg1), 0x00)) {
        Store(0x00, FLAG)
        Store(0xFF, PUID)
        Store(0xFF, APID)
      } else {
        Store(ShiftLeft(1, CNBS), Local1)
        Multiply(Arg0, local1, local1)
        Add(local1, Arg1, local1)
        Store(local1, PUID)

        //set Enable flag
        Store(0x01, FLAG)
      }

      // calculate PROCID based on APICID using same algorithm in AcpiPlatformHook.c

      Return(APIC)
    }

    Method(X2AP, 2,Serialized) {

      Name(APIC, Buffer(SIZE_X2LAPIC_STRUC) {} ) // initialize a buffer with CRST siz

      CreateByteField (APIC, 0x00,  TYPE) // Type
      CreateByteField (APIC, 0x01,  LLEN) // Length
      CreateWordField (APIC, 0x02,  RSVD) // Reserved 2 bytes
      CreateDwordField(APIC, 0x04,  APID) // APIC ID
      CreateDwordField(APIC, 0x08,  FLAG) // Flags
      CreateDwordField(APIC, 0x0C,  PUID) // ACPI Processor UID

      Store(X2LAPIC_TYPE, TYPE)
      Store(SIZE_X2LAPIC_STRUC, LLEN)
      Store(0, RSVD)

      // Update APIC ID
      Store (\_SB.TPID(Arg0, Arg1), APID)

      // Update Flag
      if(LEqual(\_SB.CSTA(Arg0, Arg1), 0x00)) {
        Store(0x00, FLAG)
        Store(0xFFFFFFFF, APID)
      } else {
        //ProcId = socket# * MAX_THREADS_PER_SOCKET + thread#
        Store(ShiftLeft(1, CNBS), Local1)
        Multiply(Arg0, local1, local1)
        Add(local1, Arg1, local1)
        Store(local1, PUID)

        //set Enable flag
        Store(0x01, FLAG)

      }

      Return(APIC)

    }

    CPU_SOCKET_DEV(0)

#if MAX_SOCKET > 1
    CPU_SOCKET_DEV(1)
#endif

#if MAX_SOCKET > 2
    CPU_SOCKET_DEV(2)
#endif

#if MAX_SOCKET > 3
    CPU_SOCKET_DEV(3)
#endif

#if MAX_SOCKET > 4
    CPU_SOCKET_DEV(4)
#endif

#if MAX_SOCKET > 5
    CPU_SOCKET_DEV(5)
#endif

#if MAX_SOCKET > 6
    CPU_SOCKET_DEV(6)
#endif

#if MAX_SOCKET > 7
    CPU_SOCKET_DEV(7)
#endif
  }
