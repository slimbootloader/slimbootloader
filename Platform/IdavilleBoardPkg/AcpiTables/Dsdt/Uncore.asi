/** @file

  Copyright (c) 2020, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

  //
  // _BBN is ACPI method called by OS to read PCI base bus number for IIO stack.
  //
  Method(_BBN, 0, NotSerialized)
  {
    Return(CONCATENATE3(BB, SOCKET, STACK))
  }

  //
  // _PXM is ACPI method called by OS to read Proximity Domain (aka NUMA Node) where IIO stack belongs to.
  //
  Method(_PXM, 0, NotSerialized)
  {
    Store(SOCKET, Local0)
    If (CLOD) {
      //
      // If Sub-NUMA Cluster (SNC) enabled report PCI in the first of SNC domains of a socket,
      // so multiplicate socket number by the number of SNC domains.
      //
      Multiply(Local0, CLOD, Local0)
    }
    Return(Local0)
  }

  //
  // _SEG is ACPI method called by OS to read PCI segment of IIO stack.
  //
  Method(_SEG, 0, NotSerialized)
  {
    Return(CONCATENATE2(SG0, SOCKET))
  }

  //
  // _STA is a ACPI method called by OS to read status of ACPI device, IIO stack in this case.
  //
  Method(_STA, 0, NotSerialized)
  { //
    // Check in processor present bitmap (PRBM) if processor is present, then
    // in stack present bitmap of given processor (SPBx) if stack is present.
    //
    ShiftLeft(1, SOCKET, Local0)
    If (And(PRBM, Local0)) {

      ShiftLeft(1, CONCATENATE2(0x,STACK), Local1)
      if (And(CONCATENATE2(SPB, SOCKET), Local1)) {
        Return(0x0F)
      }
    }
    Return(0x00)
  }

  External (DBGM, FieldUnitObj)
  Name (SUPP, 0)
  Name (CTRL, 0)

  Method(_OSC,4) {
      //
      // Create DWord-addressable fields from the capabilities Buffer
      //
      CreateDWordField(Arg3,0,CDW1)
      If (LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766"))) {

        //
        // Create DWord-addressable fields from the capabilities Buffer
        //
        CreateDWordField(Arg3,4,CDW2)

        //
        // Fill 3rd capability DWORD only if the count is greater than 2.
        //
        If(LGreater(Arg2,2)) {
          CreateDWordField(Arg3,8,CDW3)
        }

        //
        // Save Capabilities DWord2 & 3
        //
        Store(CDW2,SUPP)
        Store(CDW3,CTRL)

        //
        // Only allow native hot plug control if OS supports
        // * ASPM
        // * MSI/MSI-X
        //
        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { // Conditions not met?
          And(CTRL, 0x1E, CTRL) // Mask bit 0 to deny.
          Sleep(1000)
        }

        //
        // Never allow SHPC (no SHPC controller in system)
        //
        And(CTRL, 0x1D, CTRL)
        //
        // Disable Native PCIe AER handling from OS so that it uses Firmware First model in WHEA
        //
        And (CTRL, 0x17, CTRL)
        If (Not(And(CDW1,1))) { // Query Flag Clear?
          //
          // Disable GPEs for Features granted native control
          //
          If (And(CTRL, 0x01)) { // Native Hot plug control granted?
            Store (0x01, GPSH)                // Clear Hotplug SCI Enable in GPE0
          }
        }

        If (LNotEqual(Arg1,one)) { // unknown revision
          Or(CDW1,0x08,CDW1)
        }

        If(LNotEqual(CDW3,CTRL)) { // capabilities bits were masked
          Or(CDW1,0x10,CDW1)
        }
        //
        // update DWORD3 in the buffer
        //
        Store(CTRL,CDW3)
        Return(Arg3)

      } Else {
        //
        // Just indicate unrecognized UUID
        // Leave it at that
        //
        Or (CDW1,4,CDW1)
        if(LEqual(DBGM, 0x01)){
          Store (0xEE, IO80)
        }
        Return(Arg3)
      }
  } // End _OSC

  Name (UNRS, ResourceTemplate() {
      WORDBusNumber (     // Bus number resource (0); the bridge produces bus numbers for its subsequent buses
        ResourceProducer, // bit 0 of general flags is 1
        MinFixed,         // Range is fixed
        MaxFixed,         // Range is fixed
        PosDecode,        // PosDecode
        0x0000,           // Granularity (FIX9 - Patched by ACPI Platform Driver during POST)
        0x00FE,           // Min         (FIX9 - Patched by ACPI Platform Driver during POST)
        0x00FF,           // Max         (FIX9 - Patched by ACPI Platform Driver during POST)
        0x0000,           // Translation
        0x0002,           // Range Length = Max-Min+1 (FIX9 - Patched by ACPI Platform Driver during POST)
              ,
              ,
        BRT0              // DescriptorName populated so iASL outputs offset for it in a .h file
      )
  })

    // Current resource template return
  Method(_CRS, 0x0, NotSerialized)
  {
    // Fix up Bus Resource template
    CreateWordField(UNRS, ^BRT0._MIN, BRMN)
    Store(CONCATENATE3(UC, STACK, B), BRMN)
    CreateWordField(UNRS, ^BRT0._MAX, BRMX)
    Store(CONCATENATE3(UC, STACK, L), BRMX)
    CreateWordField(UNRS, ^BRT0._LEN, BRLN)
    Subtract(BRMX, BRMN, BRLN)
    Add(1, BRLN, BRLN)

    Return(UNRS)
  }



