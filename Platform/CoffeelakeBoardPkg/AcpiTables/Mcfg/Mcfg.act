/** @file
  This file contains a structure definition for the ACPI Memory Mapped Configuration
  Address Space table (MCFG).  Any changes to the number of entries in the table require
  updating the structure count in Mcfg.h and then adding the structure to the
  MCFG defined in this file.  The table layout is defined in Mcfg.h and the
  table contents are defined in the MemoryMappedConfigurationSpaceAccessTable.h.

  Copyright (c) 2018 - 2019, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

//
// Statements that include other files
//

#include "Mcfg.h"
#include <IndustryStandard/Acpi30.h>
#include <IndustryStandard/MemoryMappedConfigurationSpaceAccessTable.h>

//
// MCFG Definitions
//

#define EFI_ACPI_OEM_MCFG_REVISION 0x00000001

//
// Multiple APIC Description Table
//

EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_DESCRIPTION_TABLE Madt = {
  {
    EFI_ACPI_3_0_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_BASE_ADDRESS_DESCRIPTION_TABLE_SIGNATURE,
    sizeof (EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_DESCRIPTION_TABLE),
    EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_TABLE_REVISION,

    //
    // Checksum will be updated at runtime
    //
    0x00,

    //
    // It is expected that these values will be programmed at runtime
    //
    { ' ', ' ', ' ', ' ', ' ', ' ' },

    0,
    EFI_ACPI_OEM_MCFG_REVISION,
    0,
    0
  },

  //
  // Reserved
  //
  0x0000000000000000,

  //
  // MCFG specific fields
  //
  {
    {
      0x0000000000000000,    // BaseAddress, will be updated by AcpiPlatform
      0x0000,                // PciSegmentGroupNumber
      0x00,                  // StartBusNumber
      0xFF,                  // EndBusNumber, will be updated by AcpiPlatform
      0x00000000             // Reserved
    }
  }
};

#ifdef __GNUC__
VOID*
ReferenceAcpiTable (
 VOID
 )

{
 //
 // Reference the table being generated to prevent the optimizer from removing the
 // data structure from the exeutable
 //
 return (VOID*)&Madt;
}
#else
VOID
main (
  VOID
  )
{
}
#endif
